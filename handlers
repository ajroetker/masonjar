package main

import (
    websocket "code.google.com/p/go.net/websocket"
    "fmt"
    "log"
    "os"
    "strconv"
    "net/http"
    "encoding/json"
    "github.com/ajroetker/nertz"
)

func readyCheck(w http.ResponseWriter, r *http.Request) {
    // Get the game.
    game, err := getGame(c, r.FormValue("game"))
    if err != nil {
        http.Error(w, err.Error(), 500)
        return
    }

    if game.Started {
        http.Error(w, "Cannot ready check, the game already started", 500)
        return
    }

    var resp = make(map[string]string)
    w.Header().Set("Content-Type", "application/json")
    resp["Message"] = "Waiting on the other players..."
    enc := json.NewEncoder(w)
    enc.Encode(resp)

    val := <-g.ReadyPlayers
    if val == len(g.Clients) - 1 {
        g.Begin <- 1
    }
    g.ReadyPlayers <- val + 1
    return
}

func move(w http.ResponseWriter, r *http.Request) {
    // Get the game.
    game, err := getGame(c, r.FormValue("game"))
    if err != nil {
        http.Error(w, err.Error(), 500)
        return
    }
    if game.Status != 1 {
        http.Error(w, "The game is not in progress", 500)
        return
    }

    // Return a string encoding of whether
    // the move was valid or not
    w.Header().Set("Content-Type", "text/plain; charset=utf-8")
    data := new(nertz.Move)
    dec := json.NewDecoder(r.Body)
    dec.Decode(&data)
    valid := g.MakeMove(data)
    fmt.Fprintf(w, "%v", valid)
    return
}

func main() {
    if len(os.Args) != 2 {
        fmt.Fprintf(os.Stderr, "usage: %s <port>\n", os.Args[0])
        return
    }

    port, err := strconv.Atoi(os.Args[1]);
    if err != nil {
        log.Fatal(err)
    }
    listenAt := fmt.Sprintf(":%v", port)

    game := nertz.NewGame()
    go game.BroadcastMessages()
    go game.WriteScores()
    go game.AddNewClients()

    GameHandler  := MakeAcceptPlayers(game)
    MoveHandler  := MakeMoveHandler(game)
    ReadyHandler := MakeReadyHandler(game)

    http.Handle("/", websocket.Handler(GameHandler))
    http.Handle("/move", http.HandlerFunc(MoveHandler))
    http.Handle("/ready", http.HandlerFunc(ReadyHandler))
    fmt.Fprintf(os.Stdout, "Nertz server listening on port %v...\n", port)
    err = http.ListenAndServe(listenAt, nil)
    if err != nil {
        panic("ListenAndServe: " + err.Error())
    }
}
